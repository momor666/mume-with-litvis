import * as cheerio from "cheerio";
import * as _ from "lodash";
import { Cache } from "lru-cache";
import * as hash from "object-hash";

import { BlockInfo } from "../../lib/block-info";
import {
  OutputExpression,
  ProcessedLitvisContext,
  ProcessedLitvisContextStatus,
} from "../../lib/litvis";
import {
  AttributeDerivatives,
  BlockOutputFormat,
  extractAttributeDerivatives,
  OutputFormat,
  resolveExpressions,
} from "../../lib/litvis/attribute-derivatives";
import parseElmStringRepresentation from "../../lib/litvis/elm/parse-elm-string-representation";
import { LitvisNarrative } from "../../lib/litvis/narrative";
import { escapeString } from "../../utility";
import { LitvisEnhancerCache } from "./types";

export default async function enhance(
  $: CheerioStatic,
  processedNarrative: LitvisNarrative,
  cache: LitvisEnhancerCache,
) {
  // search for all elm code blocks and surround them
  // with output items if they reference expressions to output
  const mumeContextNames = [];
  $('[data-role="codeBlock"]').each((i, container) => {
    const $container = $(container);
    if ($container.data("executor")) {
      return;
    }

    const info: BlockInfo = $container.data("parsedInfo");
    if (`${info.language}`.toLowerCase() !== "elm") {
      return;
    }

    const derivatives = extractAttributeDerivatives(info.attributes);
    if (!derivatives) {
      return;
    }

    $container.data("executor", "litvis");
    if (derivatives.outputFormats.indexOf(BlockOutputFormat.L) === -1) {
      $container.data("hiddenByEnhancer", true);
    }
    mumeContextNames.push(derivatives.contextName);

    const derivativesWithResolvedExpressions = resolveExpressions(
      derivatives,
      $container.text(),
    );

    const arrayOf$outputItemsBeforeCodeBlock = [];
    const arrayOf$outputItemsAfterCodeBlock = [];
    let currentArrayOf$outputItems = arrayOf$outputItemsBeforeCodeBlock;
    derivativesWithResolvedExpressions.outputFormats.forEach((outputFormat) => {
      switch (outputFormat) {
        case BlockOutputFormat.L:
          currentArrayOf$outputItems = arrayOf$outputItemsAfterCodeBlock;
          break;
        default:
          const expressions =
            derivativesWithResolvedExpressions.outputExpressionsByFormat[
              outputFormat
            ];
          if (expressions) {
            currentArrayOf$outputItems.push(
              ...generateArrayOf$outputItems(
                expressions,
                outputFormat,
                derivativesWithResolvedExpressions,
              ),
            );
          }
      }
    });

    if (arrayOf$outputItemsBeforeCodeBlock.length) {
      $container.before(generate$output(arrayOf$outputItemsBeforeCodeBlock));
    }
    if (arrayOf$outputItemsAfterCodeBlock.length) {
      $container.after(generate$output(arrayOf$outputItemsAfterCodeBlock));
    }
  });

  // search for all triple hat references and turn them into output items
  $('[data-role="litvis:triple-hat-reference"]').each((i, el) => {
    const $el = $(el);
    const info: BlockInfo = $el.data("parsedInfo");
    if (`${info.language}`.toLowerCase() !== "elm") {
      return;
    }

    const derivatives = extractAttributeDerivatives(info.attributes);
    if (!derivatives) {
      return;
    }

    const arrayOf$outputItems = [];
    derivatives.outputFormats.forEach((outputFormat) => {
      switch (outputFormat) {
        case BlockOutputFormat.L:
          break;
        default:
          const expressions =
            derivatives.outputExpressionsByFormat[outputFormat];
          if (expressions) {
            arrayOf$outputItems.push(
              ...generateArrayOf$outputItems(
                expressions,
                outputFormat,
                derivatives,
              ),
            );
          }
      }
    });
    $el.replaceWith(generate$output(arrayOf$outputItems));
  });

  // Some context names in sidings are autogenerated by litvis,
  // but their ids may not match ids autogenerated by mume.
  // Because it is known that the number of contexts starting with '_autogenerated__X' match
  // And X is incremental, is possible to generate a mapping between lit names.
  const litvisContextNameToMumeContextName = mapAutogeneratedContextNames(
    _.map(processedNarrative.contexts, "name"),
    _.uniq(mumeContextNames),
    "_autogenerated__",
  );
  const contextsByMumeContextName = _.keyBy(
    processedNarrative.contexts,
    ({ name }) => litvisContextNameToMumeContextName[name],
  );

  // walk through all litvis output items and render them
  $('[data-role="litvisOutputItem"]').each((i, el) => {
    const $el = $(el);
    const contextName = $el.data("contextName");
    const outputFormat = $el.data("outputFormat");
    const expressionText = $el.data("expression");
    const interactive = $el.data("interactive");
    const renderKey = hash({
      contextName,
      outputFormat,
      expressionText,
      path: processedNarrative.files[processedNarrative.files.length - 1].path,
    });
    const context = contextsByMumeContextName[
      contextName
    ] as ProcessedLitvisContext;
    // const evaluatedOutputExpressionsByText = keyBy(context.evaluatedOutputExpressions, oe => oe.data.text);
    try {
      if (!context) {
        throw new Error(`Non-existing context ${contextName}`);
      }
      if (context.status !== ProcessedLitvisContextStatus.SUCCESS) {
        throw new Error(
          `Code execution in context ${contextName} was not successful`,
        );
      }
      // TODO: find() is expensive, consider optimizing by indexing
      const evaluatedOutputExpression: OutputExpression = _.find(
        context.evaluatedOutputExpressions,
        (oe) => oe.data.text === expressionText,
      );
      if (!evaluatedOutputExpression) {
        throw new Error(`Could not find expression ${expressionText}`);
      }
      if (
        typeof evaluatedOutputExpression.data.stringRepresentation !== "string"
      ) {
        throw new Error(`Could not evaluate expression ${expressionText}`);
      }
      let $result: Cheerio;
      let resultNormalizedInfo = null;
      switch (outputFormat) {
        case OutputFormat.R:
          $result = $("<span/>").text(
            evaluatedOutputExpression.data.stringRepresentation,
          );
          break;
        case OutputFormat.J:
          $result = $(`<pre data-role="codeBlock" />`);
          resultNormalizedInfo = {
            language: "json",
            attributes: { style: "display: inline-block" },
          };

          $result.text(
            JSON.stringify(
              getElmValue(
                evaluatedOutputExpression.data.stringRepresentation,
                cache.elmValueByStringRepresentation,
              ),
              null,
              2,
            ),
          );
          break;
        case OutputFormat.V: {
          const vegaOrVegaLiteJson = getElmValue(
            evaluatedOutputExpression.data.stringRepresentation,
            cache.elmValueByStringRepresentation,
          );
          const language =
            _.get(vegaOrVegaLiteJson, "$schema", "")
              .toLowerCase()
              .indexOf("lite") !== -1
              ? "vega-lite"
              : "vega";
          $result = $(`<pre data-role="codeBlock" />`);
          resultNormalizedInfo = {
            language,
            attributes: {
              interactive: interactive === true,
              style: "display: inline-block",
            },
          };
          $result.text(JSON.stringify(vegaOrVegaLiteJson, null, 2));
          break;
        }
      }

      // because serializing/deserializing data attributes works inconsistently
      // in Cheerio, setting normalized info as attribute first...
      $result.attr(
        "data-normalized-info",
        JSON.stringify(resultNormalizedInfo),
      );
      cache.successfulRenders.set(
        renderKey,
        $("<div/>")
          .append($result)
          .html(),
      );
      // ...and then as data
      $result.attr("data-normalized-info", null);
      $result.data("normalizedInfo", JSON.stringify(resultNormalizedInfo));
      $el.replaceWith($result);
    } catch (e) {
      const $error = $("<span/>").attr(
        "style",
        "background: rgba(255,200,200,0.1); min-height: 1em; min-width: 1em; display: inline-block;",
      );

      const successfulRender = cache.successfulRenders.get(renderKey);
      if (successfulRender) {
        const $successfulRender = $(successfulRender);
        const $fadedSuccessfulRender = $("<span />");
        $fadedSuccessfulRender.attr(
          "style",
          "opacity: 0.8; display: inline-block; filter: sepia(0.7) hue-rotate(-50deg);",
        );
        $fadedSuccessfulRender.append($successfulRender);
        $error.append($fadedSuccessfulRender);
      } else {
        const $errorText = $("<span/>").attr(
          "style",
          "color: red; padding: 0 0.3em; font-weight: bold; white-space: nowrap",
        );
        $errorText.text(
          `${outputFormat}=${expressionText}${
            contextName !== "default" ? ` [${contextName}]` : ``
          }`,
        );
        $error.append($errorText);
      }

      $error.attr(
        "title",
        `${outputFormat}=${expressionText}${
          contextName !== "default" ? ` [context ${contextName}]` : ``
        }: ${e.message}`,
      );
      $el.empty().append($error);
    }
  });

  // add schema narrative styling
  const arrayOf$StyleTags = [];
  _.forEach(processedNarrative.composedNarrativeSchema.css, (composedCss) => {
    const $tag = $("<style />");
    $tag.text(
      `\n/* narrative schema: ${composedCss.origin.path} */\n${
        composedCss.content
      }`,
    );
    arrayOf$StyleTags.push($tag);
  });
  if (arrayOf$StyleTags.length) {
    $.root().prepend("", ...arrayOf$StyleTags);
  }
}

function generate$output(arrayOf$outputItems) {
  return cheerio(
    '<div data-role="litvisOutput" style="display: inline;" />',
  ).append(null, ...arrayOf$outputItems);
}

function generateArrayOf$outputItems(
  outputExpressions: string[],
  outputFormat: string,
  derivatives: AttributeDerivatives,
) {
  return outputExpressions.map((outputExpression) => {
    const $outputItem = cheerio(
      `<span data-role="litvisOutputItem" data-context-name="${escapeString(
        derivatives.contextName,
      )}" data-expression="${escapeString(
        outputExpression,
      )}" data-interactive="${
        derivatives.interactive
      }" data-output-format="${escapeString(
        outputFormat,
      )}"><code>${escapeString(outputFormat)}=${escapeString(
        outputExpression,
      )}</code></span>`,
    );
    return $outputItem;
  });
}

function getElmValue(
  stringRepresentation: string,
  cache: Cache<string, object | Error>,
) {
  let valueInCache = cache.get(stringRepresentation);
  if (typeof valueInCache === "undefined") {
    try {
      valueInCache = parseElmStringRepresentation(stringRepresentation);
    } catch (e) {
      valueInCache = e;
    }
    cache.set(stringRepresentation, valueInCache);
  }
  if (valueInCache instanceof Error) {
    throw valueInCache;
  }
  return valueInCache;
}

const mapAutogeneratedContextNames = (
  litvisContextNames,
  mumeContextNames,
  autogeneratedPrefix,
) => {
  const autogeneratedLitvisContextNames = _.sortBy(
    _.filter(litvisContextNames, (name) =>
      _.startsWith(name, autogeneratedPrefix),
    ),
  );
  const autogeneratedMumeContextNames = _.sortBy(
    _.filter(mumeContextNames, (name) =>
      _.startsWith(name, autogeneratedPrefix),
    ),
  );

  const minLength = _.min([
    autogeneratedLitvisContextNames.length,
    autogeneratedMumeContextNames.length,
  ]);
  const pickedAutogeneratedLitvisContextNames = _.slice(
    autogeneratedLitvisContextNames,
    -minLength,
  );
  const pickedAutogeneratedMumeContextNames = _.slice(
    autogeneratedMumeContextNames,
    -minLength,
  );

  const result = {
    // key - litvis context name
    // value - mume context name
  };
  _.forEach(litvisContextNames, (name) => {
    const index = _.indexOf(autogeneratedLitvisContextNames, name);
    if (index !== -1) {
      result[pickedAutogeneratedLitvisContextNames[index]] =
        pickedAutogeneratedMumeContextNames[index];
    } else {
      result[name] = name;
    }
  });
  return result;
};
